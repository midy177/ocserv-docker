apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: route-injector-role
  namespace: default
rules:
  - apiGroups: ["apps"]
    resources: ["daemonsets"]
    verbs: ["create", "delete", "get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: route-injector-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: route-injector-binding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: route-injector-sa
    namespace: default
roleRef:
  kind: Role
  name: route-injector-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
data:
  ldap.conf: |
    base dc=examlpe,dc=com
    uri ldap://118.31.26.12/
    ldap_version 3
    binddn cn=admin,dc=examlpe,dc=com
    bindpw sdsfdgggfhgghg
    scope sub
    pam_login_attribute uid
  nslcd.conf: |
    uid nslcd
    gid nslcd

    uri ldap://118.31.26.12/
    base dc=examlpe,dc=com
    binddn cn=admin,dc=examlpe,dc=com
    bindpw sdsfdgggfhgghg

    tls_cacertfile /etc/ssl/certs/ca-certificates.crt
  ocpasswd: wuly:*:$5$ycVXAvqaK.0aLs1P$h10mfCEJ3yA/atJgiamP4SADierJm0CgOIeI.LCEqjB
  ocserv.conf: |
    auth = "pam"

    # 监听端口
    tcp-port = 4443
    udp-port = 4443

    # 运行权限
    run-as-user = nobody
    run-as-group = daemon

    # 进程与 socket 路径
    socket-file = /var/run/ocserv-socket
    pid-file = /var/run/ocserv.pid

    # 证书配置
    server-cert = /opt/certs/server-cert.pem
    server-key  = /opt/certs/server-key.pem
    ca-cert     = /opt/certs/ca-cert.pem


    # IP 分配配置（IPv4）
    ipv4-network = 10.7.7.0
    ipv4-netmask = 255.255.255.0
    predictable-ips = true

    # DNS 和域名设置
    dns = 172.20.0.10
    default-domain = ocserv.example.com

    # 虚拟设备名
    device = vpns
    net-priority = 6

    # 路由设置（只传 10.x 和 172.20.x 网段）
    route = 10.0.0.0/16
    route = 172.20.0.0/16
    # no-route = 0.0.0.0/0   # 如果你不需要阻止全局路由，建议注释掉此行

    # 客户端限制
    max-clients = 0
    max-same-clients = 1
    rate-limit-ms = 5

    # 心跳与掉线检测
    keepalive = 60
    dpd = 90
    mobile-dpd = 1800

    # TLS 优化配置
    tls-priorities = "PERFORMANCE:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0"

    # 会话与超时
    auth-timeout = 40
    idle-timeout = 86400
    mobile-idle-timeout = 86400
    cookie-timeout = 86400000
    rekey-time = 86400000
    rekey-method = ssl

    # 防暴力攻击设置
    max-ban-score = 50
    ban-reset-time = 300

    # 压缩设置
    compression = true
    no-compress-limit = 256

    # 客户端兼容
    cisco-client-compat = true

    # 启用 occtl 管理
    use-occtl = true
kind: ConfigMap
metadata:
  name: ocserv-config
  namespace: default
---
apiVersion: v1
data:
  route-injector.yaml: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: route-injector
    spec:
      selector:
        matchLabels:
          name: route-injector
      template:
        metadata:
          labels:
            name: route-injector
        spec:
          hostNetwork: true
          terminationGracePeriodSeconds: 10
          restartPolicy: Always
          containers:
            - name: route-setup
              image: alpine
              securityContext:
                privileged: true
              command: ["/bin/sh", "-c"]
              args:
                - |
                  set -e
                  apk add --no-cache iproute2 iptables
                  echo "[INFO] Enable IP forwarding"
                  sysctl -w net.ipv4.ip_forward=1 || true
                  echo "[INFO] Insert NAT exemption for ${POD_CIDR} -> ${VPN_CIDR}"
                  if ! iptables -t nat -C POSTROUTING -s "${POD_CIDR}" -d "${VPN_CIDR}" -j RETURN 2>/dev/null; then
                    iptables -t nat -I POSTROUTING 1 -s "${POD_CIDR}" -d "${VPN_CIDR}" -j RETURN || true
                  fi
                  echo "[INFO] Checking route to ${VPN_CIDR} via ${OCSERV_POD_IP}..."
                  if ip route | grep -q "${VPN_CIDR} via ${OCSERV_POD_IP}"; then
                    echo "[INFO] Route already exists"
                  else
                    echo "[INFO] Adding route"
                    ip route del ${VPN_CIDR} 2>/dev/null || true
                    ip route add ${VPN_CIDR} via ${OCSERV_POD_IP} || true
                  fi
                  sleep infinity
kind: ConfigMap
metadata:
  name: route-injector-manifest
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workload.user.cattle.io/workloadselector: apps.deployment-default-ocserv
  name: ocserv
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-default-ocserv
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: apps.deployment-default-ocserv
      namespace: default
    spec:
      containers:
        - env:
            - name: CA_ORG
              value: yeastar
            - name: SERV_DOMAIN
              value: x5j85ws-rditspp.exampe.com
            - name: SERV_ORG
              value: ys_ops
            - name: USER_ID
              value: 6X2m13^sssdegrDS@
          image: >-
            1228022817/ocserv:latest@sha256:4d99e8833432303dfa1052baaa82380ac8370fb1f736d9135ff405802cd61ce6
          imagePullPolicy: IfNotPresent
          name: ocserv
          ports:
            - containerPort: 4443
              name: tcp
              protocol: TCP
            - containerPort: 4443
              name: udp
              protocol: UDP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_ADMIN
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/ocserv
              name: vol-cfg
      dnsConfig: {}
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
        - args:
            - |
              echo "[INFO] Replacing OCSERV_POD_IP with ${OCSERV_POD_IP}..."
              envsubst < /manifests/route-injector.yaml > /tmp/route.yaml
              echo "[INFO] Applying route-injector DaemonSet..."
              kubectl apply -f /tmp/route.yaml -n default
              echo "[INFO] Waiting for route-injector Pods to be ready..."
              kubectl rollout status daemonset/route-injector -n default --timeout=120s
              echo "[INFO] Route injection complete, cleaning up..."
              kubectl delete -f /tmp/route.yaml -n default --ignore-not-found
          command:
            - /bin/sh
            - '-c'
          env:
            - name: OCSERV_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: POD_CIDR
              value: 10.0.0.0/16
            - name: VPN_CIDR
              value: 10.7.7.0/24
          image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          name: route-injector-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities: {}
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /manifests
              name: vol-manifest
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: route-injector-sa
      serviceAccountName: route-injector-sa
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 384
            name: ocserv-config
          name: vol-cfg
        - configMap:
            defaultMode: 420
            name: route-injector-manifest
          name: vol-manifest